---

- name: Start/enable services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ nfs_client_services | default([]) }}"

- name: Start/enable kerberos services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ nfs_client_services_krb5 | default([]) }}"
  when: nfs_krb5 | bool

- name: Set selinux bool for using share as home dir
  ansible.posix.seboolean:
    name: use_nfs_home_dirs
    state: yes
    persistent: yes
  when:
    - ansible_os_family == 'RedHat'
    - nfs_home_dir | bool

# NFS mount removal

- name: Unmount shares we no longer need
  ansible.posix.mount:
    path: '{{ item.target }}'
    src: '{{ item.src }}'
    fstype: nfs
    opts: '{{ item.options }}'
    state: absent
  loop: "{{ nfs_mounts }}"
  when: item.state is defined and item.state == 'absent'

- name: Delete unwanted mountpoints
  ansible.builtin.file:
    path: "{{ item.target }}"
    state: absent
  loop: "{{ nfs_mounts }}"
  when: item.state is defined and item.state == 'absent'


# NFS mount creation
- name: Mount all
  when: not nfs_umount_only | bool
  block:

    - name: Get stat of all mountpoints
      ansible.builtin.stat:
        path: "{{ item.target }}"
      loop: "{{ nfs_mounts }}"
      when:
        - nfs_mount_exclude is undefined or item.src is not search(nfs_mount_exclude)
        - item.state is undefined or item.state != 'absent'
      register: _mp

    - name: Ensure desired mountpoints exist
      ansible.builtin.file:
        path: "{{ item.item.target }}"
        state: directory
        mode: "0755"
      loop: "{{ _mp.results }}"
      loop_control:
        label: "{{ item.item.target }}"
      when:
        - item.state is undefined or item.state != 'absent'
        - item.stat is defined and not item.stat.exists

    - name: Mount NFS shares  # noqa args[module]
      ansible.posix.mount:
        path: '{{ item.target }}'
        src: '{{ item.src }}'
        fstype: nfs
        opts: '{{ item.options }}'
        state: "{{ item.state | default('mounted') }}"
      loop: "{{ nfs_mounts }}"
      when:
        - nfs_mount_exclude is undefined or item.src is not search(nfs_mount_exclude)
        - item.state is undefined or item.state != 'absent'
